CREATE TABLE "oracle_app".USERS 
(
  ID NUMBER GENERATED ALWAYS AS IDENTITY
, LOGIN VARCHAR2(50) NOT NULL 
, PASSWORD VARCHAR2(65) NOT NULL
, CONSTRAINT USERS_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);
/

CREATE TABLE "oracle_app".USER_PASSWORDS
(
  ID NUMBER GENERATED ALWAYS AS IDENTITY
, USER_ID NUMBER NOT NULL
, PASSWORD VARCHAR2(65) NOT NULL
, PASS_NO NUMBER NOT NULL
, CONSTRAINT USER_PASSWORDS_PK PRIMARY KEY
  (
    ID
  )
  ENABLE
, CONSTRAINT USER_PASSWORDS_FK1 FOREIGN KEY 
  (
    USER_ID
  ) 
  REFERENCES USERS 
  (
    ID
  )
  ENABLE
);
/

CREATE OR REPLACE
FUNCTION NEXT_USER_PASSWORD_ID(user_id IN NUMBER)    
RETURN NUMBER    
IS     
next_pass_id NUMBER(8);    
BEGIN    
  SELECT NVL(MAX(up.pass_no), 0) + 1 INTO next_pass_id FROM user_passwords up WHERE up.user_id = user_id;
  RETURN next_pass_id;
END;
/

CREATE OR REPLACE TRIGGER NEXT_USER_PASSWORD_ID_TRIGGER BEFORE INSERT ON "oracle_app".USER_PASSWORDS
FOR EACH ROW
BEGIN
  :new.PASS_NO := NEXT_USER_PASSWORD_ID(:new.USER_ID);
END;
/

CREATE OR REPLACE
TRIGGER "oracle_app".INSERT_USER_PASSWORD_CHANGES AFTER INSERT OR UPDATE ON "oracle_app".USERS
FOR EACH ROW
DECLARE
  v_old_pass_used NUMBER;
BEGIN
  SELECT COUNT(1) 
    INTO v_old_pass_used
    FROM "oracle_app".USER_PASSWORDS 
    WHERE user_id = :new.ID 
      AND password = :new.PASSWORD 
      AND PASS_NO = (
        SELECT NVL(MAX(PASS_NO), 0) FROM "oracle_app".USER_PASSWORDS WHERE user_id = :new.ID
      );
  IF v_old_pass_used = 0 THEN
    INSERT INTO "oracle_app".USER_PASSWORDS(USER_ID, PASSWORD) VALUES (:new.ID, :new.PASSWORD);
  END IF;
END;
/

ALTER TABLE USERS ADD CORRECT NUMBER DEFAULT 0 NOT NULL;
ALTER TABLE USERS ADD INCORRECT NUMBER DEFAULT 0 NOT NULL;
/